{% extends "hepiaThanatosBundle::layout.html.twig" %}

{% block title %}{{ parent() }} - Comparateur{% endblock %}

{% block body %}
    <div id="page-wrapper">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">Comparateur</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Résumé
                    </div>
                    <div class="panel-body">
                        <table width="100%" class="table table-bordered table-hover">
                            <tr>
                                <th>Titre</th>
                                <th>Maximum</th>
                            </tr>
                            {% for i in instances %}
                                <tr onclick="window.document.location = '{{ path('hepia_thanatos_instance_view', {'id': i.id}) }}';" style="cursor:pointer;">
                                    <td>{{ i.title }}</td>
                                    <td>{{ i.max[0]|number_format(2, '.', ',') }}</td>
                                </tr>
                            {% endfor %}
                        </table>
                    </div>
                </div>
            </div>    
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="col-lg-6">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Précision
                        </div>
                        <div class="panel-body">
                            <div class="flot-chart">
                                <div class="flot-chart-content" id="flot-line-chart-accuracy"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Fonction de perte
                        </div>
                        <div class="panel-body">
                            <div class="flot-chart">
                                <div class="flot-chart-content" id="flot-line-chart-loss"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascript %}
    <div id="js-vars" data-vars="{{ js_vars|json_encode|e('html_attr') }}"/>
    <script src="{{asset ('vendor/flot/excanvas.min.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.pie.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.resize.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.time.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.navigate.js') }}"></script>
    <script src="{{asset ('vendor/flot-tooltip/jquery.flot.tooltip.min.js') }}"></script>
    <script>
        var JsVars = jQuery('#js-vars').data('vars');

        var container1 = $("#flot-line-chart-accuracy");
        var container2 = $("#flot-line-chart-loss");

        function getSerie(array, id) {
            var res = [];
            for (var i = 0; i < array.length; ++i) {
                res.push([i, array[i][id]]);
            }
            return res;
        }

        var series1 = [];
        var series2 = [];
        var tData = JsVars.tData;

        for (var i = 0; i < tData.length; i++) {
            series1.push(
                    {
                        data: getSerie(tData[i][0], 0),
                        label: "Précision " + tData[i][1],
                        lines: {
                            show: true
                        },
                        points: {
                            show: true
                        }
                    }
            );
            series2.push(
                    {
                        data: getSerie(tData[i][0], 1),
                        label: "Validation " + tData[i][1],
                        lines: {
                            show: true
                        },
                        points: {
                            show: true
                        }
                    },
                    {
                        data: getSerie(tData[i][0], 2),
                        label: "Entraînement " + tData[i][1],
                        lines: {
                            show: true
                        },
                        points: {
                            show: true
                        }
                    }
            );
        }

        var options = {
            grid: {
                hoverable: true,
                borderWidth: 1,
                minBorderMargin: 20,
                labelMargin: 10,
                backgroundColor: {
                    colors: ["#fff", "#e4f4f4"]
                },
                margin: {
                    top: 8,
                    bottom: 20,
                    left: 20
                },
                markings: function (axes) {
                    var markings = [];
                    var xaxis = axes.xaxis;
                    for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 2) {
                        markings.push({
                            xaxis: {
                                from: x,
                                to: x + xaxis.tickSize
                            },
                            color: "rgba(232, 232, 255, 0.2)"
                        });
                    }
                    return markings;
                }
            },
            xaxis: {
            },
            legend: {
                show: true
            },
            tooltip: true,
            tooltipOpts: {
                content: "%y.2"
            },
            zoom: {
                interactive: true
            },
            pan: {
                interactive: true
            }
        };

        var plot1 = $.plot(container1, series1, options);
        var plot2 = $.plot(container2, series2, options);
    </script>
{% endblock %}