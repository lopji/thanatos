{% extends "hepiaThanatosBundle::layout.html.twig" %}

{% block title %}{{ parent() }} - Voir une instance{% endblock %}

{% block body %}
    <div id="page-wrapper">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">Voir une instance</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Résumé
                    </div>
                    <div class="panel-body">
                        <table width="100%" class="table table-bordered">
                            <tr>
                                <th width="20%">Titre</th>
                                <td>{{ instance[0].title }}</td>
                            </tr>
                            <tr>
                                <th>Réseau de neurones</th>
                                <td>{{ instance[0].network.title }}</td>
                            </tr>
                            <tr>
                                <th>Ensemble de données</th>
                                <td>{{ instance[0].data.title }}</td>
                            </tr>
                            <tr>
                                <th>Numéro</th>
                                <td>{{ instance[0].number }}</td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td id="status"></td>
                            <tr>
                            <tr>
                                <th>Erreur</th>
                                <td id="error"></td>
                            <tr>
                            <tr>
                                <th>Maximum</th>
                                <td><span id="maximum">{{ max[0]|number_format(2, '.', ',')  }}</span></td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="col-lg-6">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Précision
                        </div>
                        <div class="panel-body">
                            <div class="flot-chart">
                                <div class="flot-chart-content" id="flot-line-chart-accuracy"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Fonction de perte
                        </div>
                        <div class="panel-body">
                            <div class="flot-chart">
                                <div class="flot-chart-content" id="flot-line-chart-loss"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Actions
                    </div>
                    <!-- /.panel-heading -->
                    <div class="panel-body">
                        <button id="start" class="btn btn-primary">Démarrer</button>
                        <button id="resume" class="btn btn-primary">Reprendre</button>
                        <button id="break" class="btn btn-primary">Pause</button>
                        <button id="stop" class="btn btn-primary">Stop</button>
                        <button id="save" class="btn btn-primary">Sauvegarder</button>
                        <button id="download" class="btn btn-primary">Télécharger</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="information" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Démarrer une instance.</h4>
                </div>
                <div class="modal-body">
                    <select id="network" class="form-control">
                        {% for c in computers %}
                            <option value="{{ c }}">{{ c }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" id="launch" class="btn btn-default" >Lancer</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Annuler</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascript %}
    <script src="{{asset ('vendor/flot/excanvas.min.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.pie.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.resize.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.time.js') }}"></script>
    <script src="{{asset ('vendor/flot/jquery.flot.navigate.js') }}"></script>
    <script src="{{asset ('vendor/flot-tooltip/jquery.flot.tooltip.min.js') }}"></script>
    <script type="text/javascript">
        var JsVars = jQuery('#js-vars').data('vars');
        var socket = io.connect('http://' + JsVars.websocket.host + ':' + JsVars.websocket.port + '/javascript');
        var name = "";

        function hideAlL() {
            $("#start").hide();
            $("#resume").hide();
            $("#break").hide();
            $("#stop").hide();
            $("#save").hide();
        }

        function swapState(id) {
            hideAlL();
            switch (id) {
                case 0:
                    $("#start").show();
                    break;
                case 1:
                    $("#break").show();
                    $("#stop").show();
                    $("#save").show();
                    break;
                case 3:
                    $("#resume").show();
                    break;
            }
        }

        function refresh() {
            series1[0].data = getSerie(tData, 0);
            series2[0].data = getSerie(tData, 1);
            series2[1].data = getSerie(tData, 2);
            plot1.setData(series1);
            plot1.setupGrid();
            plot1.draw();
            plot2.setData(series2);
            plot2.setupGrid();
            plot2.draw();
        }

        socket.on('validation', function (validation) {
            if (String(validation.instance_id) === JsVars.id) {
                tData.push([validation["accuracy"], validation["validation"], validation["training"]]);
                if (parseFloat($("#maximum").html()) < parseFloat(validation["accuracy"])) {
                    $("#maximum").html(Math.round(validation["accuracy"] * 100) / 100);
                }
                refresh();
            }
        });

        socket.on('computers', function (computers) {
            var i;
            var status = "L'instance est stoppée";
            var error = "Aucune erreur";
            var state = 0;
            for (i = 0; i < computers.length; i++) {
                if (String(computers[i].id) === JsVars.id) {
                    status = computers[i].status;
                    error = computers[i].error;
                    name = computers[i].name;
                    state = computers[i].state;
                }
            }
            $("#status").html(status);
            $("#error").html(error);
            swapState(state);
        });

        $("#start").click(function () {
            $('#information').modal('show');
        });

        $("#resume").click(function () {
            socket.emit("resume", {name: name});
        });

        $("#break").click(function () {
            socket.emit("break", {name: name});
        });

        $("#stop").click(function () {
            socket.emit("stop", {name: name});
        });

        $("#save").click(function () {
            socket.emit("save", {name: name});
        });

        $("#download").click(function () {
            window.location.replace('http://' + JsVars.websocket.host + ':' + JsVars.websocket.port + '/saves/get/' + JsVars.id + '.npz');
        });

        $("#launch").click(function () {
            socket.emit("start", {id: JsVars.id, name: $("#network").val()});
            $('#information').modal('hide');
        });

        var container1 = $("#flot-line-chart-accuracy");
        var container2 = $("#flot-line-chart-loss");
        var tData = JsVars.tData;

        function getSerie(array, id) {
            var res = [];
            for (var i = 0; i < array.length; ++i) {
                res.push([i, array[i][id]]);
            }
            return res;
        }

        var series1 = [{
                data: getSerie(tData, 0),
                label: "Précision",
                lines: {
                    show: true
                },
                points: {
                    show: true
                }
            }];

        var series2 = [{
                data: getSerie(tData, 1),
                label: "Validation",
                lines: {
                    show: true
                },
                points: {
                    show: true
                }
            },
            {
                data: getSerie(tData, 2),
                label: "Entraînement",
                lines: {
                    show: true
                },
                points: {
                    show: true
                }
            }];

        var options = {
            grid: {
                hoverable: true,
                borderWidth: 1,
                minBorderMargin: 20,
                labelMargin: 10,
                backgroundColor: {
                    colors: ["#fff", "#e4f4f4"]
                },
                margin: {
                    top: 8,
                    bottom: 20,
                    left: 20
                },
                markings: function (axes) {
                    var markings = [];
                    var xaxis = axes.xaxis;
                    for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 2) {
                        markings.push({
                            xaxis: {
                                from: x,
                                to: x + xaxis.tickSize
                            },
                            color: "rgba(232, 232, 255, 0.2)"
                        });
                    }
                    return markings;
                }
            },
            xaxis: {
            },
            legend: {
                show: true
            },
            tooltip: true,
            tooltipOpts: {
                content: "%y.2"
            },
            zoom: {
                interactive: true
            },
            pan: {
                interactive: true
            }
        };

        var plot1 = $.plot(container1, series1, options);
        var plot2 = $.plot(container2, series2, options);
        hideAlL();
    </script>
{% endblock %}
